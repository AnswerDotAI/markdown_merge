[
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "MarkdownMerge",
    "section": "",
    "text": "from fastcore.test import test_eq",
    "crumbs": [
      "MarkdownMerge"
    ]
  },
  {
    "objectID": "core.html#utility-functions",
    "href": "core.html#utility-functions",
    "title": "MarkdownMerge",
    "section": "Utility functions",
    "text": "Utility functions\n\nsource\n\nget_addr\n\n get_addr (email, name=None)\n\nConvert email and optional name into an email Address object\nSpecify from_addr and to_addrs as either a string, or an Address object (created with get_addr). Note the to_addrs is a list.\n\nfrom_addr = get_addr('from@example.com', 'Jeremy Howard')\nto_addrs = [get_addr('to@example.com', 'Jeręmy Hòwärd')]\nprint(from_addr)\nprint(to_addrs[0])\n\nJeremy Howard &lt;from@example.com&gt;\nJeręmy Hòwärd &lt;to@example.com&gt;\n\n\n\nsource\n\n\nattach_file\n\n attach_file (msg, f)\n\nAttach file f to message msg\n\nmsg = MIMEMultipart(policy=EmailPolicy())\nattach_file(msg, '../settings.ini')\npart = msg.get_payload()[0]\ntest_eq(part.get_content_type(), 'application/octet-stream')\ntest_eq(part['Content-Disposition'], 'attachment; filename=settings.ini')\nassert len(part.get_payload())&gt;20\n\n\nsource\n\n\ncreate_multipart_msg\n\n create_multipart_msg (subj, from_addr, to_addrs, md=None, html=None,\n                       attach=None, hdrs=None)\n\nCreate a multipart email with markdown text and HTML\n\nmsg = create_multipart_msg('Test Subject', from_addr, to_addrs, hdrs={'atest':'foo'},\n                           md='**Bold text**', html='&lt;b&gt;Bold text&lt;/b&gt;')\ntest_eq(msg['Subject'], 'Test Subject')\ntest_eq(msg['From'], str(from_addr))\ntest_eq(msg['atest'], 'foo')\ntest_eq(len(msg.get_payload()), 2)\ntest_eq(msg.get_payload()[0].get_content_type(), 'text/plain')\ntest_eq(msg.get_payload()[1].get_content_type(), 'text/html')\nassert '@' in msg['To']\n\n\nsource\n\n\nmd2email\n\n md2email (subj, from_addr, to_addrs, md, attach=None, hdrs=None)\n\nCreate a multipart email from markdown\n\ntest_msg2 = md2email('Test md2email', 'support@answer.ai', 'j@answer.ai', '**Markdown** test with _attachment_', attach='../settings.ini')\ntest_eq(test_msg2['Subject'], 'Test md2email')\npayload = test_msg2.get_payload()\ntest_eq(len(payload), 3)\ntest_eq(payload[2]['Content-Disposition'], 'attachment; filename=settings.ini')\n\nThe basic email body is the plain text message (note that the template variables in {} will be filled in by MarkdownMerge):\n\nprint(payload[0].get_payload())\n\n**Markdown** test with _attachment_\n\n\nMost email software is set up to display the HTML version:\n\nfrom IPython.display import HTML\n\n\nhtml = payload[1].get_payload()\nHTML(html)\n\nMarkdown test with attachment\n\n\n\natt = payload[2].get_payload()\n\n\nimport base64\n\n\ndecoded = base64.b64decode(payload[2].get_payload())\nprint(decoded.decode('utf-8')[:35])\n\n[DEFAULT]\nrepo = markdown_merge\nlib\n\n\n\nsource\n\n\nsmtp_connection\n\n smtp_connection (host, port, user=None, password=None, use_ssl=True,\n                  use_tls=False)\n\nCreate and return an SMTP connection\n\nservernm='email-smtp.us-west-2.amazonaws.com'\nusername=os.getenv('SES_SMTP_USER')\npassword=os.getenv('SES_SMTP_PASS')\n\n\nsmtp_cfg = dict(host=servernm, port=587, user=username, password=password, use_ssl=False, use_tls=True)\ntest_msg = create_multipart_msg('Test from stdlib', 'support@answer.ai', 'j@answer.ai', md='**Test message**', html='&lt;b&gt;Test message&lt;/b&gt;')\n# try:\n#     conn = smtp_connection(**smtp_cfg)\n#     conn.send_message(test_msg)\n# finally: conn.quit()\n\n\nsource\n\n\nMarkdownMerge\n\n MarkdownMerge (addrs, from_addr, subj, msg, smtp_cfg=None, inserts=None,\n                test=False, hdrs=None, env_from=None)\n\nSend templated email merge messages formatted with Markdown\nYour message should be in markdown format. It will be converted into a two part email, containing both a plain text and an HTML part, so recipients will see whatever format they’re set as their preference for viewing mail. Anything in curly brackets {} will be replaced with the contents of the inserts dictionary for that address. If there are no bracketed variables to replace, then you don’t need to pass any inserts.\n\nmsg = \"**Hello {name}!**\\n\\nYour special number is: *{num}*\"\n\ninserts is a list of dictionaries. For each dictionary, the keys should match the bracketed names in your email template, and the values will be filled in to those sections.\n\ninserts = [{'name': 'Jeremy', 'num': 42}, {'name': 'Rachel', 'num': 7}]\n\n\nmm = MarkdownMerge(['aaa@answer.ai', 'bbb@answer.ai'], 'from@answer.ai', 'Test merge',\n                   msg, smtp_cfg=smtp_cfg, inserts=inserts, test=True)\n\n\nmm.send_msgs()\n\nTo: aaa@answer.ai\n----------------------------------------\n**Hello Jeremy!**\n\nYour special number is: *42*\n========================================\n\nTo: bbb@answer.ai\n----------------------------------------\n**Hello Rachel!**\n\nYour special number is: *7*\n========================================\n\n\n\nUse pause to avoid sending too many messages too quickly; many SMTP servers restrict sending speed to avoid abuse. If you get an error during sending (e.g. “too many messages”), then wait an hour or so, then continue sending, using a larger pause value.\nNB: You can just call send_msgs again when resending, since the successfully sent message count is saved, and those messages are not re-sent (unless you call reset). This includes test sends, therefore you should run reset after a test send.\nTo reset the counter to 0, call reset:\n\nmm.reset()",
    "crumbs": [
      "MarkdownMerge"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MarkdownMerge",
    "section": "",
    "text": "pip install markdown_merge",
    "crumbs": [
      "MarkdownMerge"
    ]
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "MarkdownMerge",
    "section": "",
    "text": "pip install markdown_merge",
    "crumbs": [
      "MarkdownMerge"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "MarkdownMerge",
    "section": "How to use",
    "text": "How to use\n\nProvide your SMTP server settings, e.g. for AWS SES\n\nimport os\n\n\nservernm = 'email-smtp.us-west-2.amazonaws.com'\nusername = os.getenv('SES_SMTP_USER')\npassword = os.getenv('SES_SMTP_PASS')\nsmtp_cfg = dict(host=servernm, port=587, user=username, password=password, use_ssl=False, use_tls=True)\n\nYou can configure your SMTP server settings using the smtp_cfg dictionary format shown above. The example uses AWS SES with environment variables for credentials.\n\n\nProvide your email details\n\nfrom_addr = get_addr('XXX@fastmail.com', 'Jeremy Howard')\nto_addrs = [get_addr('douglas@example.com', 'Douglas Adams'),\n            get_addr('cleese@example.com', 'John Cleese')]\ninserts  = [{'special': \"Thanks for all the fish.\"},\n            {'special': \"That was a silly walk.\"}]\n\nmsg = \"\"\"## Hello there!\n\nHere is your special message: *{special}*\"\"\"\n\n\nml = MarkdownMerge(to_addrs, from_addr, 'A message', msg, smtp_cfg=smtp_cfg, inserts=inserts, test=True)\n\nThe test=True parameter prints the messages instead of sending them.\n\n\nSend your messages\n\nml.send_msgs()\n\nTo: Douglas Adams &lt;douglas@example.com&gt;\n----------------------------------------\n## Hello there!\n\nHere is your special message: *Thanks for all the fish.*\n========================================\n\nTo: John Cleese &lt;cleese@example.com&gt;\n----------------------------------------\n## Hello there!\n\nHere is your special message: *That was a silly walk.*\n========================================",
    "crumbs": [
      "MarkdownMerge"
    ]
  }
]